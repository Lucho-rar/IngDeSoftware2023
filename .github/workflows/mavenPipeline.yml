
name: Pipeline Java Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  
  process-resources:
    environment: Development
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Process-Resources
      run: |
          cd Damas_Chinas
          mvn process-resources
  compile:
    environment: Development
    runs-on: ubuntu-latest
    needs: process-resources
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Compile
      run: |
          cd Damas_Chinas    
          mvn compile

  process-classes:
    environment: Development
    runs-on: ubuntu-latest
    needs: compile
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: ProcessClasses
      run: |
          cd Damas_Chinas
          mvn process-classes
          
  process-test-resources:
    environment: Development
    runs-on: ubuntu-latest
    needs: process-classes
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: ProcessTestResources
      run: |
          cd Damas_Chinas
          mvn process-test-resources

  process-test-compile:
      environment: Development
      runs-on: ubuntu-latest
      needs: process-test-resources
      steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: ProcessTestResources
        run: |
            cd Damas_Chinas
            mvn test-compile
  tests:
    environment: Development
    runs-on: ubuntu-latest
    needs: process-test-compile
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Tests
      run: mvn test
      
      
      
  prepare-package:
    environment: Development
    runs-on: ubuntu-latest
    needs: tests
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: PreparePackage
      run: mvn prepare-package

  check-horusec:
    environment: Development
    runs-on: ubuntu-latest
    needs: prepare-package
    steps:
    - uses: actions/checkout@v3
    - name: CheckSecrets
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Horusec
      run: |
          cd Damas_Chinas
          curl -fsSL https://raw.githubusercontent.com/ZupIT/horusec/master/deployments/scripts/install.sh | bash -s latest
          horusec start -D -p="./" -o"=json" -O=horusec-config.json

    - name: Instalar liberias de script
      run: |
           pip install pandas==1.3.3
           pip install pydantic==1.8.2
           pip install plotly==5.3.1

    - name: Run Security tools
      run: python dash.py Damas_Chinas/horusec-config.json horusec

    - name: Upload artefact
      uses: actions/upload-artifact@v3
      with:
        name: horusec
        path: Damas_Chinas/horusec-config.json
    
    - name: Informe interactivo
      uses: actions/upload-artifact@v2
      with:
        name: informe_interactivo
        path: informe_interactivo.html

  import-cifr:
    environment: Development
    name: Secrets
    runs-on: ubuntu-latest
    needs: check-horusec
    steps:
      - name: Configuracion de vault
        run: |
            echo "VAULT_ADDR=https://sample-cluster-public-vault-0266fbaf.0bff476f.z1.hashicorp.cloud:8200" >> $GITHUB_ENV
            echo "VAULT_NAMESPACE=admin" >> $GITHUB_ENV
      - name: Token de vault
        run: |
             VAULT_TOKEN=$(curl -s --header "X-Vault-Namespace: $VAULT_NAMESPACE" \
             --request POST --data '{"role_id": "9592a17f-4399-2243-a219-7d2a97b516a4", "secret_id": "47174514-b5a2-d0b2-ab9b-064e3e8eae60"}' \
             $VAULT_ADDR/v1/auth/approle/login | jq -r '.auth.client_token')
             echo "VAULT_TOKEN=$VAULT_TOKEN" >> $GITHUB_ENV
      - name: Get Token Semgrep
        run: |
            token_semgrep=$(curl -s --header "X-Vault-Token: $VAULT_TOKEN" \
            --header "X-Vault-Namespace: $VAULT_NAMESPACE" \
            $VAULT_ADDR/v1/secret/data/data| jq -r ".data.data.token_semgrep")
            echo "token_semgrep=$token_semgrep" >> $GITHUB_ENV
            touch token_semgrep.txt
            echo "$token_semgrep" > token_semgrep.txt
      - name: Upload token semgrep
        uses: actions/upload-artifact@v2
        with:
          name: token_semgrep
          path: token_semgrep.txt

      - name: Get Token Sonar
        run: |
            token_sonar=$(curl -s --header "X-Vault-Token: $VAULT_TOKEN" \
            --header "X-Vault-Namespace: $VAULT_NAMESPACE" \
            $VAULT_ADDR/v1/secret/data/data| jq -r ".data.data.token_sonar")
            echo "token_sonar=$token_sonar" >> $GITHUB_ENV
            touch token_sonar.txt
            echo "$token_sonar" > token_sonar.txt
      
      - name: Upload token sonar
        uses: actions/upload-artifact@v2
        with:
          name: token_sonar
          path: token_sonar.txt

      - name: Get Token GitHub
        run: |
            token_git=$(curl -s --header "X-Vault-Token: $VAULT_TOKEN" \
            --header "X-Vault-Namespace: $VAULT_NAMESPACE" \
            $VAULT_ADDR/v1/secret/data/data| jq -r ".data.data.token_git")
            echo "token_git=$token_git" >> $GITHUB_ENV
            touch token_git.txt
            echo "$token_git" > token_git.txt

      - name: Upload token sonar
        uses: actions/upload-artifact@v2
        with:
          name: token_git
          path: token_git.txt
        

  
  sempgrep:
    name: semgrepCI
    runs-on: ubuntu-latest
    needs: [import-cifr, check-horusec]
    container: returntocorp/semgrep
    steps:
      - name: Obtener el artifact
        uses: actions/download-artifact@v2
        with:
          name: token_semgrep
      - name: Read artifact
        run: |
            SEMGREP_APP_TOKEN=$(cat token_semgrep.txt)
            echo "SEMGREP_APP_TOKEN: $SEMGREP_APP_TOKEN"
            echo "SEMGREP_APP_TOKEN=$SEMGREP_APP_TOKEN" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v2
      - name: Run semgrep
        run: semgrep ci


  check-sonarQ:
    environment: Development
    name: sonarQ
    runs-on: ubuntu-latest
    needs: [check-horusec, import-cifr]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
        
      - name: Artifact - sonar
        uses: actions/download-artifact@v2
        with:
          name: token_sonar
      - name: Artifact - gihtub
        uses: actions/download-artifact@v2
        with:
          name: token_git
      - name: Read artifact
        run: |
             SONAR_TOK=$(cat token_sonar.txt)
             echo "SONAR_TOK: $SONAR_TOK"
             echo "SONAR_TOK=$SONAR_TOK" >> $GITHUB_ENV

             TOKEN_GIT=$(cat token_git.txt)
             echo "TOKEN_GIT: $TOKEN_GIT"
             echo "TOKEN_GIT=$TOKEN_GIT" >> $GITHUB_ENV
    

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{env.TOKEN_GIT}}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ env.SONAR_TOK }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST }}
        run: |
            echo Run SonarQube Simulation ! ! !
            
  #mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
  build:

    runs-on: ubuntu-latest
    needs: check-sonarQ
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
      
    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    - name: Update dependency graph
      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

  deploy-page:
    permissions: 
      pages: write
      id-token: write
    environment: 
      name: Prod
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Page
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

